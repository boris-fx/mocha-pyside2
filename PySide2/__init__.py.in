__all__ = ['QtCore', 'QtConcurrent', 'QtGui', 'QtNetwork', 'QtWidgets', 'QtXml']
__version__         = "@BINDING_API_VERSION_FULL@"
__version_info__    = (@BINDING_API_MAJOR_VERSION@, @BINDING_API_MINOR_VERSION@, @BINDING_API_MICRO_VERSION@, "@BINDING_API_RELEASE_LEVEL@", @BINDING_API_SERIAL@)

@PYSIDE_BUILD_DATE@
@PYSIDE_BUILD_COMMIT_DATE@
@PYSIDE_BUILD_COMMIT_HASH@
@PYSIDE_BUILD_COMMIT_HASH_DESCRIBED@

def _setupQtDirectories():
    import sys
    import os

    pyside_package_dir =  os.path.abspath(os.path.dirname(__file__))
    # Used by signature module.
    os.environ["PYSIDE_PACKAGE_DIR"] = pyside_package_dir

    # On Windows add the PySide2\openssl folder (if it exists) to the
    # PATH so that the SSL DLLs can be found when Qt tries to dynamically
    # load them. Tell Qt to load them and then reset the PATH.
    if sys.platform == 'win32':
        openssl_dir = os.path.join(pyside_package_dir, 'openssl')
        if os.path.exists(openssl_dir):
            path = os.environ['PATH']
            try:
                os.environ['PATH'] = os.path.join(openssl_dir, path)
                try:
                    from . import QtNetwork
                except ImportError:
                    pass
                else:
                    QtNetwork.QSslSocket.supportsSsl()
            finally:
                os.environ['PATH'] = path

_setupQtDirectories()
